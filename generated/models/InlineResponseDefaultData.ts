/* tslint:disable */
/* eslint-disable */
/**
 * Jupiter API
 * Jupiter quote and swap API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    InlineResponseDefaultFees,
    InlineResponseDefaultFeesFromJSON,
    InlineResponseDefaultFeesFromJSONTyped,
    InlineResponseDefaultFeesToJSON,
} from './InlineResponseDefaultFees';
import {
    InlineResponseDefaultMarketInfos,
    InlineResponseDefaultMarketInfosFromJSON,
    InlineResponseDefaultMarketInfosFromJSONTyped,
    InlineResponseDefaultMarketInfosToJSON,
} from './InlineResponseDefaultMarketInfos';

/**
 * 
 * @export
 * @interface InlineResponseDefaultData
 */
export interface InlineResponseDefaultData {
    /**
     * 
     * @type {number}
     * @memberof InlineResponseDefaultData
     */
    inAmount: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponseDefaultData
     */
    outAmount: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponseDefaultData
     */
    priceImpactPct: number;
    /**
     * 
     * @type {Array<InlineResponseDefaultMarketInfos>}
     * @memberof InlineResponseDefaultData
     */
    marketInfos: Array<InlineResponseDefaultMarketInfos>;
    /**
     * 
     * @type {number}
     * @memberof InlineResponseDefaultData
     */
    amount: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponseDefaultData
     */
    slippageBps: number;
    /**
     * The threshold for the swap based on the provided slippage: when swapMode is ExactIn the minimum out amount, when swapMode is ExactOut the maximum in amount
     * @type {number}
     * @memberof InlineResponseDefaultData
     */
    otherAmountThreshold: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefaultData
     */
    swapMode: InlineResponseDefaultDataSwapModeEnum;
    /**
     * 
     * @type {InlineResponseDefaultFees}
     * @memberof InlineResponseDefaultData
     */
    fees?: InlineResponseDefaultFees;
}

/**
* @export
* @enum {string}
*/
export enum InlineResponseDefaultDataSwapModeEnum {
    ExactIn = 'ExactIn',
    ExactOut = 'ExactOut'
}

export function InlineResponseDefaultDataFromJSON(json: any): InlineResponseDefaultData {
    return InlineResponseDefaultDataFromJSONTyped(json, false);
}

export function InlineResponseDefaultDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): InlineResponseDefaultData {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'inAmount': json['inAmount'],
        'outAmount': json['outAmount'],
        'priceImpactPct': json['priceImpactPct'],
        'marketInfos': ((json['marketInfos'] as Array<any>).map(InlineResponseDefaultMarketInfosFromJSON)),
        'amount': json['amount'],
        'slippageBps': json['slippageBps'],
        'otherAmountThreshold': json['otherAmountThreshold'],
        'swapMode': json['swapMode'],
        'fees': !exists(json, 'fees') ? undefined : InlineResponseDefaultFeesFromJSON(json['fees']),
    };
}

export function InlineResponseDefaultDataToJSON(value?: InlineResponseDefaultData | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'inAmount': value.inAmount,
        'outAmount': value.outAmount,
        'priceImpactPct': value.priceImpactPct,
        'marketInfos': ((value.marketInfos as Array<any>).map(InlineResponseDefaultMarketInfosToJSON)),
        'amount': value.amount,
        'slippageBps': value.slippageBps,
        'otherAmountThreshold': value.otherAmountThreshold,
        'swapMode': value.swapMode,
        'fees': InlineResponseDefaultFeesToJSON(value.fees),
    };
}

