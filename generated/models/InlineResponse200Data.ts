/* tslint:disable */
/* eslint-disable */
/**
 * Jupiter API
 * Jupiter quote and swap API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    InlineResponse200Fees,
    InlineResponse200FeesFromJSON,
    InlineResponse200FeesFromJSONTyped,
    InlineResponse200FeesToJSON,
} from './InlineResponse200Fees';
import {
    InlineResponse200MarketInfos,
    InlineResponse200MarketInfosFromJSON,
    InlineResponse200MarketInfosFromJSONTyped,
    InlineResponse200MarketInfosToJSON,
} from './InlineResponse200MarketInfos';

/**
 * 
 * @export
 * @interface InlineResponse200Data
 */
export interface InlineResponse200Data {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Data
     */
    inAmount: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Data
     */
    outAmount: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse200Data
     */
    priceImpactPct: number;
    /**
     * 
     * @type {Array<InlineResponse200MarketInfos>}
     * @memberof InlineResponse200Data
     */
    marketInfos: Array<InlineResponse200MarketInfos>;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Data
     */
    amount: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse200Data
     */
    slippageBps: number;
    /**
     * The threshold for the swap based on the provided slippage: when swapMode is ExactIn the minimum out amount, when swapMode is ExactOut the maximum in amount
     * @type {string}
     * @memberof InlineResponse200Data
     */
    otherAmountThreshold: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Data
     */
    swapMode: InlineResponse200DataSwapModeEnum;
    /**
     * 
     * @type {InlineResponse200Fees}
     * @memberof InlineResponse200Data
     */
    fees?: InlineResponse200Fees;
}

/**
* @export
* @enum {string}
*/
export enum InlineResponse200DataSwapModeEnum {
    ExactIn = 'ExactIn',
    ExactOut = 'ExactOut'
}

export function InlineResponse200DataFromJSON(json: any): InlineResponse200Data {
    return InlineResponse200DataFromJSONTyped(json, false);
}

export function InlineResponse200DataFromJSONTyped(json: any, ignoreDiscriminator: boolean): InlineResponse200Data {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'inAmount': json['inAmount'],
        'outAmount': json['outAmount'],
        'priceImpactPct': json['priceImpactPct'],
        'marketInfos': ((json['marketInfos'] as Array<any>).map(InlineResponse200MarketInfosFromJSON)),
        'amount': json['amount'],
        'slippageBps': json['slippageBps'],
        'otherAmountThreshold': json['otherAmountThreshold'],
        'swapMode': json['swapMode'],
        'fees': !exists(json, 'fees') ? undefined : InlineResponse200FeesFromJSON(json['fees']),
    };
}

export function InlineResponse200DataToJSON(value?: InlineResponse200Data | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'inAmount': value.inAmount,
        'outAmount': value.outAmount,
        'priceImpactPct': value.priceImpactPct,
        'marketInfos': ((value.marketInfos as Array<any>).map(InlineResponse200MarketInfosToJSON)),
        'amount': value.amount,
        'slippageBps': value.slippageBps,
        'otherAmountThreshold': value.otherAmountThreshold,
        'swapMode': value.swapMode,
        'fees': InlineResponse200FeesToJSON(value.fees),
    };
}

