/* tslint:disable */
/* eslint-disable */
/**
 * Swap API
 * API reference for Jupiter\'s Swap API, including Quote, Swap and Swap Instructions endpoints.  ### Rate Limits Since 1 December 2024, we have updated our API structure. Please refer to https://dev.jup.ag/ for further details on usage and rate limits.  ### Usage - API Wrapper Typescript https://github.com/jup-ag/jupiter-quote-api-node  ### Data Types To Note - Public keys are base58 encoded strings - Raw data such as Vec<u8\\> are base64 encoded strings 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { JitoTipLamports } from './JitoTipLamports';
import {
    instanceOfJitoTipLamports,
    JitoTipLamportsFromJSON,
    JitoTipLamportsFromJSONTyped,
    JitoTipLamportsToJSON,
} from './JitoTipLamports';
import type { JitoTipLamportsWithPayer } from './JitoTipLamportsWithPayer';
import {
    instanceOfJitoTipLamportsWithPayer,
    JitoTipLamportsWithPayerFromJSON,
    JitoTipLamportsWithPayerFromJSONTyped,
    JitoTipLamportsWithPayerToJSON,
} from './JitoTipLamportsWithPayer';
import type { PriorityLevelWithMaxLamports } from './PriorityLevelWithMaxLamports';
import {
    instanceOfPriorityLevelWithMaxLamports,
    PriorityLevelWithMaxLamportsFromJSON,
    PriorityLevelWithMaxLamportsFromJSONTyped,
    PriorityLevelWithMaxLamportsToJSON,
} from './PriorityLevelWithMaxLamports';

/**
 * @type SwapRequestPrioritizationFeeLamports
 * - To specify a level or amount of additional fees to prioritize the transaction
 * - It can be used for EITHER priority fee OR Jito tip (not both at the same time)
 * - If you want to include both, you will need to use `/swap-instructions` to add both at the same time
 * - Defaults to `auto`, but preferred to use `priorityLevelWithMaxLamports` as it may be more accurate when accounting local fee market
 * - Fixed lamports can be passed in as an integer in the `prioritizationFeeLamports` parameter
 * 
 * @export
 */
export type SwapRequestPrioritizationFeeLamports = JitoTipLamports | JitoTipLamportsWithPayer | PriorityLevelWithMaxLamports;

export function SwapRequestPrioritizationFeeLamportsFromJSON(json: any): SwapRequestPrioritizationFeeLamports {
    return SwapRequestPrioritizationFeeLamportsFromJSONTyped(json, false);
}

export function SwapRequestPrioritizationFeeLamportsFromJSONTyped(json: any, ignoreDiscriminator: boolean): SwapRequestPrioritizationFeeLamports {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return { ...JitoTipLamportsFromJSONTyped(json, true), ...JitoTipLamportsWithPayerFromJSONTyped(json, true), ...PriorityLevelWithMaxLamportsFromJSONTyped(json, true) };
}

export function SwapRequestPrioritizationFeeLamportsToJSON(value?: SwapRequestPrioritizationFeeLamports | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }

    if (instanceOfJitoTipLamports(value)) {
        return JitoTipLamportsToJSON(value as JitoTipLamports);
    }
    if (instanceOfJitoTipLamportsWithPayer(value)) {
        return JitoTipLamportsWithPayerToJSON(value as JitoTipLamportsWithPayer);
    }
    if (instanceOfPriorityLevelWithMaxLamports(value)) {
        return PriorityLevelWithMaxLamportsToJSON(value as PriorityLevelWithMaxLamports);
    }

    return {};
}

