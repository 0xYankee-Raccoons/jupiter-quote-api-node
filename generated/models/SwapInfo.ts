/* tslint:disable */
/* eslint-disable */
/**
 * Swap API
 * The heart and soul of Jupiter lies in the Quote and Swap API.  ### API Rate Limit Since 1 December 2024, we have updated our API structure. Please refer to [Developer Docs](https://dev.jup.ag/docs/) for further details on usage and rate limits.  ### API Usage - API Wrapper Typescript [@jup-ag/api](https://github.com/jup-ag/jupiter-quote-api-node)  ### Data Types To Note - Public keys are base58 encoded strings - Raw data such as Vec<u8\\> are base64 encoded strings 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SwapInfo
 */
export interface SwapInfo {
    /**
     * 
     * @type {string}
     * @memberof SwapInfo
     */
    ammKey: string;
    /**
     * 
     * @type {string}
     * @memberof SwapInfo
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof SwapInfo
     */
    inputMint: string;
    /**
     * 
     * @type {string}
     * @memberof SwapInfo
     */
    outputMint: string;
    /**
     * 
     * @type {string}
     * @memberof SwapInfo
     */
    inAmount: string;
    /**
     * 
     * @type {string}
     * @memberof SwapInfo
     */
    outAmount: string;
    /**
     * 
     * @type {string}
     * @memberof SwapInfo
     */
    feeAmount: string;
    /**
     * 
     * @type {string}
     * @memberof SwapInfo
     */
    feeMint: string;
}

/**
 * Check if a given object implements the SwapInfo interface.
 */
export function instanceOfSwapInfo(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "ammKey" in value;
    isInstance = isInstance && "inputMint" in value;
    isInstance = isInstance && "outputMint" in value;
    isInstance = isInstance && "inAmount" in value;
    isInstance = isInstance && "outAmount" in value;
    isInstance = isInstance && "feeAmount" in value;
    isInstance = isInstance && "feeMint" in value;

    return isInstance;
}

export function SwapInfoFromJSON(json: any): SwapInfo {
    return SwapInfoFromJSONTyped(json, false);
}

export function SwapInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): SwapInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'ammKey': json['ammKey'],
        'label': !exists(json, 'label') ? undefined : json['label'],
        'inputMint': json['inputMint'],
        'outputMint': json['outputMint'],
        'inAmount': json['inAmount'],
        'outAmount': json['outAmount'],
        'feeAmount': json['feeAmount'],
        'feeMint': json['feeMint'],
    };
}

export function SwapInfoToJSON(value?: SwapInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ammKey': value.ammKey,
        'label': value.label,
        'inputMint': value.inputMint,
        'outputMint': value.outputMint,
        'inAmount': value.inAmount,
        'outAmount': value.outAmount,
        'feeAmount': value.feeAmount,
        'feeMint': value.feeMint,
    };
}

