/* tslint:disable */
/* eslint-disable */
/**
 * Swap API
 * API reference for Jupiter\'s Swap API, including Quote, Swap and Swap Instructions endpoints.  ### Rate Limits Since 1 December 2024, we have updated our API structure. Please refer to https://dev.jup.ag/ for further details on usage and rate limits.  ### Usage - API Wrapper Typescript https://github.com/jup-ag/jupiter-quote-api-node  ### Data Types To Note - Public keys are base58 encoded strings - Raw data such as Vec<u8\\> are base64 encoded strings 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AccountMeta } from './AccountMeta';
import {
    AccountMetaFromJSON,
    AccountMetaFromJSONTyped,
    AccountMetaToJSON,
} from './AccountMeta';

/**
 * 
 * @export
 * @interface Instruction
 */
export interface Instruction {
    /**
     * 
     * @type {string}
     * @memberof Instruction
     */
    programId: string;
    /**
     * 
     * @type {Array<AccountMeta>}
     * @memberof Instruction
     */
    accounts: Array<AccountMeta>;
    /**
     * 
     * @type {string}
     * @memberof Instruction
     */
    data: string;
}

/**
 * Check if a given object implements the Instruction interface.
 */
export function instanceOfInstruction(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "programId" in value;
    isInstance = isInstance && "accounts" in value;
    isInstance = isInstance && "data" in value;

    return isInstance;
}

export function InstructionFromJSON(json: any): Instruction {
    return InstructionFromJSONTyped(json, false);
}

export function InstructionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Instruction {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'programId': json['programId'],
        'accounts': ((json['accounts'] as Array<any>).map(AccountMetaFromJSON)),
        'data': json['data'],
    };
}

export function InstructionToJSON(value?: Instruction | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'programId': value.programId,
        'accounts': ((value.accounts as Array<any>).map(AccountMetaToJSON)),
        'data': value.data,
    };
}

